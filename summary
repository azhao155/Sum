Topology sort:
  BFS: degree and neighbour, once degree equal 0, add into result
  	test distance
	current level to next level, each one is a collection
	nested array
	
  DFS:
      visited[i] = 0. Exist. Non-visited.
      visited[i] = 1. Visiting.
      visited[i] = 2. Visited.
      
public boolean dfs(boolean[][] adj, int[] visited, StringBuilder sb, int i) {
    visited[i] = 1;                            // 1 = visiting
    for(int j = 0; j < N; j++) {
        if(adj[i][j]) {                        // connected
            if(visited[j] == 1) return false;  // 1 => 1, cycle   
            if(visited[j] == 0) {              // 0 = unvisited
                if(!dfs(adj, visited, sb, j)) return false;
            }
        }
    }
    visited[i] = 2;                           // 2 = visited
    sb.append((char) (i + 'a'));
    return true;
}

	if there is word list, could try to build trie to save time.
	
	
	stack to mimic dfs, if there is no more to go, pop, else add related elements into stack


continous array:
    presum + hashmap
    
Sort:
	binaray search the ordered array
	use binaray search tree to comapare large small and stats
 
Array :   
	Hash 作为记忆的方法: 2sum 
	partition：
public int partition(int[] A){
    int n=A.length;
    int q=-1;
    for(int i=0;i<n;i++){
        if(A[i]>0){
            q++;
            swap(A,q,i);
        }
    }
    return q;
}

标记方法就是对正数加一个负号
不讲究order的都可以考虑用map

max stack, 相等或者大于先压最大值


Design data structure: 
1.	LRU: 
Get: remove, then add
Put remove, add , remove
Hash for quick look up, list for quick remove, insert

2.	用stack记录最近的local maximum

Link List:
	Reverse link list and check none 
	Two pointer, same as array
	Sort array sum, using two pointer
	3sum, two pointer for the sum
	Two pointer, 先走右边，走到符合规定，再动左边去violate
	first move to child, put child back in main thread
	
	merge list, find middle, reverse



Graph:
	Mark visited, and dfs
	Union Find: 
        UnionFind(char[][] grid) {  
            m = grid.length;  
            n = grid[0].length;  
            father = new int[m*n];  
            for (int i = 0; i < m; i++) {  
                for (int j = 0; j < n; j++) {  
                    if (grid[i][j] == '1') {
                        int id = i * n + j;
                        father[id] = id;
                        count++;
                    }
                }  
            }  
        }
        public void union(int node1, int node2) {  
            int find1 = find(node1);
            int find2 = find(node2);
            if(find1 != find2) {
                father[find1] = find2;
                count--;
            }
        }
        public int find (int node) {  
            if (father[node] == node) {  
                return node;
            }
            father[node] = find(father[node]);  
            return father[node];
        }
    }
Use rank to check cycle

union find to merge collection


Palindrome :
	Dp  substring 顺序
	  for (int i = n - 1; i >= 0; i--) {
    for (int j = i; j < n; j++) {
      dp[i][j] = s.charAt(i) == s.charAt(j) && (j - i < 3 || dp[i + 1][j - 1]);
      
how to check two strings together is palindrome:
Case1: If s1 is a blank string, then for any string that is palindrome s2, s1+s2 and s2+s1 are palindrome.

Case 2: If s2 is the reversing string of s1, then s1+s2 and s2+s1 are palindrome.

Case 3: If s1[0:cut] is palindrome and there exists s2 is the reversing string of s1[cut+1:] , then s2+s1 is palindrome.

Case 4: Similiar to case3. If s1[cut+1: ] is palindrome and there exists s2 is the reversing string of s1[0:cut] , then s1+s2 is palindrome.
 
DP:  
    for (int i = n - 1; i >= 0; i--) {
        for (int j = i; j < n; j++) {
            dp[i][j] = s.charAt(i) == s.charAt(j) && (j - i < 3 || dp[i + 1][j - 1]);
            if(dp[i][j]) ++res;
        }
    }
    
   revserse same as traverse
   
Please note that the outer loop should be about coins, while the inner loop should be about amount. Or else, there may be duplicates in the result, e.g. for input: amount = 5, coins = [1, 2, 5], it counts [2, 2, 1] and [2, 1, 2] as two different combinations, so it will return 9 rather than 5. All in all, the order of coins doesn't matterin this case, so we set it as the outer loop.

   

Binary Search:
	要去掉连续的一段

DP: 
	考虑最后一步，往往是包含这个元素


PriorityQueue：
	保持局部有序，只在乎極緻
	two prorioty queue, both needs to enter
	update queue:
        while (k > 0 && !q.isEmpty()) {
            Map.Entry<Character, Integer> top = q.poll(); // most frequency task
            top.setValue(top.getValue() - 1); // decrease frequency, meaning it got executed
            tempList.add(top); // collect task to add back to queue
            k--;
            count++; //successfully executed task
        }

        for (Map.Entry<Character, Integer> e : tempList) {
            if (e.getValue() > 0) q.add(e); // add valid tasks 
        }


Array:
	Sort by …
	Merge interval, sort by start, check new start and old end
	get start array and end array, two pointer 
	Hashmap to record presum
	Add numbers: two pointer
	frequency, use bucekt sort, fixed frequency
	Check interval whether has intesection:
	
            int startMax = Math.max(a.start, b.start);
            int endMin = Math.min(a.end, b.end);
            
            if (endMin >= startMax) {
                res.add(new Interval(startMax, endMin));
            }
	    
	reverse order: stack
	one pass, usually use map to record previously showed same key position
	
	non-overlap, left -> right pass including i, right - > left pass including i + 1
	    
overflow:
	   if (base >  INT_MAX / 10 || (base == INT_MAX / 10 && str[i] - '0' > 7))
	   
	   rate limit, the queue has size of rate, and only compare the first one
	   
	   use stack to compare the nearst
	   
	   sametimes use dic to identify whether there is period cycle
	   
	   sliding windows used to check max/min


Bit operation:
	高位bit作为下一次的status

数字表示：
	Less than 20
	Tens
	Thousands

Tree:
	Serilize/deserilize, preorder and BFS
	travser while update global variable, thus updating all the variables
	dfs build map, bfs test distance
	
use dfs to level traverse:

    private void travel(TreeNode curr, List<List<Integer>> sol, int level)
    {
        if(curr == null) return;
        
        if(sol.size() <= level)
        {
            List<Integer> newLevel = new LinkedList<>();
            sol.add(newLevel);
        }
        
        List<Integer> collection  = sol.get(level);
        if(level % 2 == 0) collection.add(curr.val);
        else collection.add(0, curr.val);
        
        travel(curr.left, sol, level + 1);
        travel(curr.right, sol, level + 1);
    }
	
	
public List<Integer> inorderTraversal(TreeNode root) {
    List<Integer> list = new ArrayList<>();
    if(root == null) return list;
    Stack<TreeNode> stack = new Stack<>();
    while(root != null || !stack.empty()){
        while(root != null){
            stack.push(root);
            root = root.left;
        }
        root = stack.pop();
        list.add(root.val);
        root = root.right;
        
    }
    return list;
}
	
	
    	/** @return whether we have a next smallest number */
    	public boolean hasNext() {		  
    	      return !stack.isEmpty() || current != null;  
    	}
    
    	    /** @return the next smallest number */
    	public int next() {
    		while (current != null) {
    			stack.push(current);
    			current = current.left ;
    		}		
    		TreeNode t = stack.pop() ;		
    		current = t.right ;		
    		return t.val ;
    	}
	
	word dict => trie
	
	
Parentheses:
	left_removed, right_removed, pair(dangling left Parentheses)
	dfs, open, close
	stack to check invalid
	
Test justification:
 	try to add the current work, wordlist, accuLen

Next permutation:
	reverse sort, find a little bit larger, reverse again.
	
nested string:
	stack, cur_string, cur_num
	
dp: 
	outside layer to use the coin to avoid duplication
	
bucket:
	clock structure, only limited values	
	fixed time range.

regex match:
            if (p.charAt(j) == '.') {
                dp[i+1][j+1] = dp[i][j];
            }
            if (p.charAt(j) == s.charAt(i)) {
                dp[i+1][j+1] = dp[i][j];
            }
            if (p.charAt(j) == '*') {
                if (p.charAt(j-1) != s.charAt(i) && p.charAt(j-1) != '.') {
                    dp[i+1][j+1] = dp[i+1][j-1];
                } else {
                    dp[i+1][j+1] = (dp[i+1][j] || dp[i][j+1] || dp[i+1][j-1]);
                }
            }
	  }
	  
        for i in range(1, n +1):
            for j in range(1, m+1):
                if p[j-1] != "*":
                    dp[i][j] = dp[i-1][j-1] and (p[j-1] == s[i-1] or p[j-1] == "?")
                else:
                    dp[i][j] = dp[i-1][j] or dp[i][j-1]
		    
fix windows length, moving window:
	use dequeue, stack
	

Calculator:
	use stack to process * and /
	res, preval: last number, curval: cur number, sign 
	
        while (i < length && (int)s.charAt(i) <= 57 && (int)s.charAt(i) >= 48) { // int
            curVal = curVal*10 + (s.charAt(i) - '0');
            i++;
        }
        if (sign == '+') {
            res += preVal;  // update res
            preVal = curVal;
        } else if (sign == '-') {
            res += preVal;  // update res
            preVal = -curVal;
        } else if (sign == '*') {
            preVal = preVal * curVal; // not update res, combine preVal & curVal and keep loop
        } else if (sign == '/') {
            preVal = preVal / curVal; // not update res, combine preVal & curVal and keep loop
        }
        if (i < length) { // getting new sign
            sign = s.charAt(i);
            i++;
        }
	
	sign + number and then take action
	
	
        if(Character.isDigit(s.charAt(i))){
            num = num*10+s.charAt(i)-'0';
        }
        if((!Character.isDigit(s.charAt(i)) &&' '!=s.charAt(i)) || i==len-1){
            if(sign=='-'){
                stack.push(-num);
            }
            if(sign=='+'){
                stack.push(num);
            }
            if(sign=='*'){
                stack.push(stack.pop()*num);
            }
            if(sign=='/'){
                stack.push(stack.pop()/num);
            }
            sign = s.charAt(i);
            num = 0;
	    
        if(Character.isDigit(c)){
            number = 10 * number + (int)(c - '0');
        }else if(c == '+'){
            result += sign * number;
            number = 0;
            sign = 1;
        }else if(c == '-'){
            result += sign * number;
            number = 0;
            sign = -1;
        }else if(c == '('){
            //we push the result first, then sign;
            stack.push(result);
            stack.push(sign);
            //reset the sign and result for the value in the parenthesis
            sign = 1;   
            result = 0;
        }else if(c == ')'){
            result += sign * number;  
            number = 0;
            result *= stack.pop();    //stack.pop() is the sign before the parenthesis
            result += stack.pop();   //stack.pop() now is the result calculated before the parenthesis
	    
            while i < len(s):
                c = s[i]
                if c == " ":
                    i += 1
                    continue
                if c.isdigit():
                    num = 10 * num + int(c)
                    i += 1
                elif c == '(':
                    num, i = helper([], i+1)
                else:
                    if sign == '+':
                        stack.append(num)
                    if sign == '-':
                        stack.append(-num)
                    if sign == '*':
                        stack.append(stack.pop() * num)
                    if sign == '/':
                        stack.append(int(stack.pop() / num))
                    num = 0
                    i += 1
                    if c == ')':
                        return sum(stack), i
                    sign = c 
		    
	single problem should be still using stack for both +- && */, but need to use recursive to solve ()
	
LFU:
Explanation
Each key is mapping to the corresponding node (self._node), where we can retrieve the node in O(1) time.

Each frequency freq is mapped to a Doubly Linked List (self._freq), where all nodes in the DLinkedList have the same frequency, freq. Moreover, each node will be always inserted in the head (indicating most recently used).

A minimum frequency self._minfreq is maintained to keep track of the minimum frequency of across all nodes in this cache, such that the DLinkedList with the min frequency can always be retrieved in O(1) time.

Here is how the algorithm works
get(key)

query the node by calling self._node[key]
find the frequency by checking node.freq, assigned as f, and query the DLinkedList that this node is in, through calling self._freq[f]
pop this node
update node's frequence, append the node to the new DLinkedList with frequency f+1
if the DLinkedList is empty and self._minfreq == f, update self._minfreq to f+1.
return node.val
put(key, value)

If key is already in cache, do the same thing as get(key), and update node.val as value
Otherwise:
if the cache is full, pop the least frequenly used element (*)
add new node to self._node
add new node to self._freq[1]
reset self._minfreq to 1
(*) The least frequently used element is the tail element in the DLinkedList with frequency self._minfreq

ip address validation:
	if ((s.startsWith("0") && s.length()>1) || (i==3 && Integer.parseInt(s) >= 256)) continue;
	
file read:
	ptr and remainCount

rotate images:
for (int i=0; i<n/2; i++) 
        for (int j=i; j<n-i-1; j++) {
            int tmp=matrix[i][j];
            matrix[i][j]=matrix[n-j-1][i];
            matrix[n-j-1][i]=matrix[n-i-1][n-j-1];
            matrix[n-i-1][n-j-1]=matrix[j][n-i-1];
            matrix[j][n-i-1]=tmp;
	    
	   举一个例子，类似0， 1， 然后每次overwrite都是交换x，y元素
 * clockwise rotate
 * first reverse up to down, then swap the symmetry 
  * anticlockwise rotate
 * first reverse left to right, then swap the symmetry
 
 sliding windows:
     while (right < s.length()) {
        //move right everytime, if the character exists in p's hash, decrease the count
        //current hash value >= 1 means the character is existing in p
        if (hash[s.charAt(right++)]-- >= 1) count--; 
        
        //when the count is down to 0, means we found the right anagram
        //then add window's left to result list
        if (count == 0) list.add(left);
    
        //if we find the window's size equals to p, then we have to move left (narrow the window) to find the new match window
        //++ to reset the hash because we kicked out the left
        //only increase the count if the character is in p
        //the count >= 0 indicate it was original in the hash, cuz it won't go below 0
        if (right - left == p.length() && hash[s.charAt(left++)]++ >= 0) count++;
    }
    
topology sort:
	neight + indgree
	
Trie: get word in alphabetical order

VALID number:
If we see [0-9] we reset the number flags.
We can only see . if we didn't see e or ..
We can only see e if we didn't see e but we did see a number. We reset numberAfterE flag.
We can only see + and - in the beginning and after an e
any other character break the validation.
At the and it is only valid if there was at least 1 number and if we did see an e then a number after it as well.


